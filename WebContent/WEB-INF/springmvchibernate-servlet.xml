<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<!-- <mvc:annotation-driven /> -->

	<!-- This tag allows Spring to load all the components from package edu.csulb.springproject.controller 
		and all it child packages. This loads our HelloWorld Class -->
	<context:component-scan base-package="edu.csulb"></context:component-scan>

	<!-- We have defined a bean with id = "viewResolver". This bean will basically 
		resolve the view and add prefix string /WEB-INF/jsp and suffix .jsp to the 
		view in ModelAndView. In our HelloWorld Class, we return a ModelAndView object 
		with view name "welcome". This will be resolved to "/WEB-INF/jsp/welcome.jsp" 
		with the help of this view resolver -->

	<bean id="viewResolver"	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- Configuring DataSource Bean -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/library" />
		<property name="username" value="mbhanot" />
		<property name="password" value="csulb" />
	</bean>

	<!-- Configure Hibernate's SessionFactory bean -->
	<!-- SessionFactory bean is configured through a LocalSessionFactoryBean 
		which is actually a FactoryBean that creates a Hibernate's SessionFactory 
		object which is then injected into Hibernate-based DAO implementations -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
	</bean>
	
	<!-- Configuring transaction manager bean -->
	<tx:annotation-driven />
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- Commenting out the below configurations -->
	<!-- Added BeanConfig file to instantiate the beans in the Spring Container -->
	
	<!-- Configuring BookDao and passing SessionFactory instance to it -->
	<!-- <bean id="bookDao" class="edu.csulb.library.dao.impl.BookDaoImpl">
		<constructor-arg>
			<ref bean="sessionFactory" />
		</constructor-arg>
	</bean> -->
	
	<!-- Configuring the bean BookService -->
	<!-- <bean id="bookService" class = "edu.csulb.library.service.BookService">
		<constructor-arg>
			<ref bean="bookDao" />
		</constructor-arg>
	</bean> -->

</beans>